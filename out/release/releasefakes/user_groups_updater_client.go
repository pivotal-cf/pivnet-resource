// Code generated by counterfeiter. DO NOT EDIT.
package releasefakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v7"
)

type UserGroupsUpdaterClient struct {
	AddUserGroupStub        func(string, int, int) error
	addUserGroupMutex       sync.RWMutex
	addUserGroupArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	addUserGroupReturns struct {
		result1 error
	}
	addUserGroupReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateReleaseStub        func(string, pivnet.Release) (pivnet.Release, error)
	updateReleaseMutex       sync.RWMutex
	updateReleaseArgsForCall []struct {
		arg1 string
		arg2 pivnet.Release
	}
	updateReleaseReturns struct {
		result1 pivnet.Release
		result2 error
	}
	updateReleaseReturnsOnCall map[int]struct {
		result1 pivnet.Release
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UserGroupsUpdaterClient) AddUserGroup(arg1 string, arg2 int, arg3 int) error {
	fake.addUserGroupMutex.Lock()
	ret, specificReturn := fake.addUserGroupReturnsOnCall[len(fake.addUserGroupArgsForCall)]
	fake.addUserGroupArgsForCall = append(fake.addUserGroupArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.AddUserGroupStub
	fakeReturns := fake.addUserGroupReturns
	fake.recordInvocation("AddUserGroup", []interface{}{arg1, arg2, arg3})
	fake.addUserGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *UserGroupsUpdaterClient) AddUserGroupCallCount() int {
	fake.addUserGroupMutex.RLock()
	defer fake.addUserGroupMutex.RUnlock()
	return len(fake.addUserGroupArgsForCall)
}

func (fake *UserGroupsUpdaterClient) AddUserGroupCalls(stub func(string, int, int) error) {
	fake.addUserGroupMutex.Lock()
	defer fake.addUserGroupMutex.Unlock()
	fake.AddUserGroupStub = stub
}

func (fake *UserGroupsUpdaterClient) AddUserGroupArgsForCall(i int) (string, int, int) {
	fake.addUserGroupMutex.RLock()
	defer fake.addUserGroupMutex.RUnlock()
	argsForCall := fake.addUserGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *UserGroupsUpdaterClient) AddUserGroupReturns(result1 error) {
	fake.addUserGroupMutex.Lock()
	defer fake.addUserGroupMutex.Unlock()
	fake.AddUserGroupStub = nil
	fake.addUserGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *UserGroupsUpdaterClient) AddUserGroupReturnsOnCall(i int, result1 error) {
	fake.addUserGroupMutex.Lock()
	defer fake.addUserGroupMutex.Unlock()
	fake.AddUserGroupStub = nil
	if fake.addUserGroupReturnsOnCall == nil {
		fake.addUserGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addUserGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *UserGroupsUpdaterClient) UpdateRelease(arg1 string, arg2 pivnet.Release) (pivnet.Release, error) {
	fake.updateReleaseMutex.Lock()
	ret, specificReturn := fake.updateReleaseReturnsOnCall[len(fake.updateReleaseArgsForCall)]
	fake.updateReleaseArgsForCall = append(fake.updateReleaseArgsForCall, struct {
		arg1 string
		arg2 pivnet.Release
	}{arg1, arg2})
	stub := fake.UpdateReleaseStub
	fakeReturns := fake.updateReleaseReturns
	fake.recordInvocation("UpdateRelease", []interface{}{arg1, arg2})
	fake.updateReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserGroupsUpdaterClient) UpdateReleaseCallCount() int {
	fake.updateReleaseMutex.RLock()
	defer fake.updateReleaseMutex.RUnlock()
	return len(fake.updateReleaseArgsForCall)
}

func (fake *UserGroupsUpdaterClient) UpdateReleaseCalls(stub func(string, pivnet.Release) (pivnet.Release, error)) {
	fake.updateReleaseMutex.Lock()
	defer fake.updateReleaseMutex.Unlock()
	fake.UpdateReleaseStub = stub
}

func (fake *UserGroupsUpdaterClient) UpdateReleaseArgsForCall(i int) (string, pivnet.Release) {
	fake.updateReleaseMutex.RLock()
	defer fake.updateReleaseMutex.RUnlock()
	argsForCall := fake.updateReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *UserGroupsUpdaterClient) UpdateReleaseReturns(result1 pivnet.Release, result2 error) {
	fake.updateReleaseMutex.Lock()
	defer fake.updateReleaseMutex.Unlock()
	fake.UpdateReleaseStub = nil
	fake.updateReleaseReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *UserGroupsUpdaterClient) UpdateReleaseReturnsOnCall(i int, result1 pivnet.Release, result2 error) {
	fake.updateReleaseMutex.Lock()
	defer fake.updateReleaseMutex.Unlock()
	fake.UpdateReleaseStub = nil
	if fake.updateReleaseReturnsOnCall == nil {
		fake.updateReleaseReturnsOnCall = make(map[int]struct {
			result1 pivnet.Release
			result2 error
		})
	}
	fake.updateReleaseReturnsOnCall[i] = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *UserGroupsUpdaterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addUserGroupMutex.RLock()
	defer fake.addUserGroupMutex.RUnlock()
	fake.updateReleaseMutex.RLock()
	defer fake.updateReleaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UserGroupsUpdaterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
