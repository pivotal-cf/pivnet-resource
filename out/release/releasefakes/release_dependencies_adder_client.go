// Code generated by counterfeiter. DO NOT EDIT.
package releasefakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v7"
)

type ReleaseDependenciesAdderClient struct {
	AddReleaseDependencyStub        func(string, int, int) error
	addReleaseDependencyMutex       sync.RWMutex
	addReleaseDependencyArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	addReleaseDependencyReturns struct {
		result1 error
	}
	addReleaseDependencyReturnsOnCall map[int]struct {
		result1 error
	}
	GetReleaseStub        func(string, string) (pivnet.Release, error)
	getReleaseMutex       sync.RWMutex
	getReleaseArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getReleaseReturns struct {
		result1 pivnet.Release
		result2 error
	}
	getReleaseReturnsOnCall map[int]struct {
		result1 pivnet.Release
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseDependenciesAdderClient) AddReleaseDependency(arg1 string, arg2 int, arg3 int) error {
	fake.addReleaseDependencyMutex.Lock()
	ret, specificReturn := fake.addReleaseDependencyReturnsOnCall[len(fake.addReleaseDependencyArgsForCall)]
	fake.addReleaseDependencyArgsForCall = append(fake.addReleaseDependencyArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.AddReleaseDependencyStub
	fakeReturns := fake.addReleaseDependencyReturns
	fake.recordInvocation("AddReleaseDependency", []interface{}{arg1, arg2, arg3})
	fake.addReleaseDependencyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ReleaseDependenciesAdderClient) AddReleaseDependencyCallCount() int {
	fake.addReleaseDependencyMutex.RLock()
	defer fake.addReleaseDependencyMutex.RUnlock()
	return len(fake.addReleaseDependencyArgsForCall)
}

func (fake *ReleaseDependenciesAdderClient) AddReleaseDependencyCalls(stub func(string, int, int) error) {
	fake.addReleaseDependencyMutex.Lock()
	defer fake.addReleaseDependencyMutex.Unlock()
	fake.AddReleaseDependencyStub = stub
}

func (fake *ReleaseDependenciesAdderClient) AddReleaseDependencyArgsForCall(i int) (string, int, int) {
	fake.addReleaseDependencyMutex.RLock()
	defer fake.addReleaseDependencyMutex.RUnlock()
	argsForCall := fake.addReleaseDependencyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ReleaseDependenciesAdderClient) AddReleaseDependencyReturns(result1 error) {
	fake.addReleaseDependencyMutex.Lock()
	defer fake.addReleaseDependencyMutex.Unlock()
	fake.AddReleaseDependencyStub = nil
	fake.addReleaseDependencyReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseDependenciesAdderClient) AddReleaseDependencyReturnsOnCall(i int, result1 error) {
	fake.addReleaseDependencyMutex.Lock()
	defer fake.addReleaseDependencyMutex.Unlock()
	fake.AddReleaseDependencyStub = nil
	if fake.addReleaseDependencyReturnsOnCall == nil {
		fake.addReleaseDependencyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReleaseDependencyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseDependenciesAdderClient) GetRelease(arg1 string, arg2 string) (pivnet.Release, error) {
	fake.getReleaseMutex.Lock()
	ret, specificReturn := fake.getReleaseReturnsOnCall[len(fake.getReleaseArgsForCall)]
	fake.getReleaseArgsForCall = append(fake.getReleaseArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetReleaseStub
	fakeReturns := fake.getReleaseReturns
	fake.recordInvocation("GetRelease", []interface{}{arg1, arg2})
	fake.getReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseDependenciesAdderClient) GetReleaseCallCount() int {
	fake.getReleaseMutex.RLock()
	defer fake.getReleaseMutex.RUnlock()
	return len(fake.getReleaseArgsForCall)
}

func (fake *ReleaseDependenciesAdderClient) GetReleaseCalls(stub func(string, string) (pivnet.Release, error)) {
	fake.getReleaseMutex.Lock()
	defer fake.getReleaseMutex.Unlock()
	fake.GetReleaseStub = stub
}

func (fake *ReleaseDependenciesAdderClient) GetReleaseArgsForCall(i int) (string, string) {
	fake.getReleaseMutex.RLock()
	defer fake.getReleaseMutex.RUnlock()
	argsForCall := fake.getReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ReleaseDependenciesAdderClient) GetReleaseReturns(result1 pivnet.Release, result2 error) {
	fake.getReleaseMutex.Lock()
	defer fake.getReleaseMutex.Unlock()
	fake.GetReleaseStub = nil
	fake.getReleaseReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *ReleaseDependenciesAdderClient) GetReleaseReturnsOnCall(i int, result1 pivnet.Release, result2 error) {
	fake.getReleaseMutex.Lock()
	defer fake.getReleaseMutex.Unlock()
	fake.GetReleaseStub = nil
	if fake.getReleaseReturnsOnCall == nil {
		fake.getReleaseReturnsOnCall = make(map[int]struct {
			result1 pivnet.Release
			result2 error
		})
	}
	fake.getReleaseReturnsOnCall[i] = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *ReleaseDependenciesAdderClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseDependencyMutex.RLock()
	defer fake.addReleaseDependencyMutex.RUnlock()
	fake.getReleaseMutex.RLock()
	defer fake.getReleaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseDependenciesAdderClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
