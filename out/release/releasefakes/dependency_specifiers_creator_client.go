// Code generated by counterfeiter. DO NOT EDIT.
package releasefakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v7"
)

type DependencySpecifiersCreatorClient struct {
	CreateDependencySpecifierStub        func(string, int, string, string) (pivnet.DependencySpecifier, error)
	createDependencySpecifierMutex       sync.RWMutex
	createDependencySpecifierArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 string
		arg4 string
	}
	createDependencySpecifierReturns struct {
		result1 pivnet.DependencySpecifier
		result2 error
	}
	createDependencySpecifierReturnsOnCall map[int]struct {
		result1 pivnet.DependencySpecifier
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DependencySpecifiersCreatorClient) CreateDependencySpecifier(arg1 string, arg2 int, arg3 string, arg4 string) (pivnet.DependencySpecifier, error) {
	fake.createDependencySpecifierMutex.Lock()
	ret, specificReturn := fake.createDependencySpecifierReturnsOnCall[len(fake.createDependencySpecifierArgsForCall)]
	fake.createDependencySpecifierArgsForCall = append(fake.createDependencySpecifierArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateDependencySpecifierStub
	fakeReturns := fake.createDependencySpecifierReturns
	fake.recordInvocation("CreateDependencySpecifier", []interface{}{arg1, arg2, arg3, arg4})
	fake.createDependencySpecifierMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DependencySpecifiersCreatorClient) CreateDependencySpecifierCallCount() int {
	fake.createDependencySpecifierMutex.RLock()
	defer fake.createDependencySpecifierMutex.RUnlock()
	return len(fake.createDependencySpecifierArgsForCall)
}

func (fake *DependencySpecifiersCreatorClient) CreateDependencySpecifierCalls(stub func(string, int, string, string) (pivnet.DependencySpecifier, error)) {
	fake.createDependencySpecifierMutex.Lock()
	defer fake.createDependencySpecifierMutex.Unlock()
	fake.CreateDependencySpecifierStub = stub
}

func (fake *DependencySpecifiersCreatorClient) CreateDependencySpecifierArgsForCall(i int) (string, int, string, string) {
	fake.createDependencySpecifierMutex.RLock()
	defer fake.createDependencySpecifierMutex.RUnlock()
	argsForCall := fake.createDependencySpecifierArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *DependencySpecifiersCreatorClient) CreateDependencySpecifierReturns(result1 pivnet.DependencySpecifier, result2 error) {
	fake.createDependencySpecifierMutex.Lock()
	defer fake.createDependencySpecifierMutex.Unlock()
	fake.CreateDependencySpecifierStub = nil
	fake.createDependencySpecifierReturns = struct {
		result1 pivnet.DependencySpecifier
		result2 error
	}{result1, result2}
}

func (fake *DependencySpecifiersCreatorClient) CreateDependencySpecifierReturnsOnCall(i int, result1 pivnet.DependencySpecifier, result2 error) {
	fake.createDependencySpecifierMutex.Lock()
	defer fake.createDependencySpecifierMutex.Unlock()
	fake.CreateDependencySpecifierStub = nil
	if fake.createDependencySpecifierReturnsOnCall == nil {
		fake.createDependencySpecifierReturnsOnCall = make(map[int]struct {
			result1 pivnet.DependencySpecifier
			result2 error
		})
	}
	fake.createDependencySpecifierReturnsOnCall[i] = struct {
		result1 pivnet.DependencySpecifier
		result2 error
	}{result1, result2}
}

func (fake *DependencySpecifiersCreatorClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDependencySpecifierMutex.RLock()
	defer fake.createDependencySpecifierMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DependencySpecifiersCreatorClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
