// Code generated by counterfeiter. DO NOT EDIT.
package releasefakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v7"
)

type ReleaseUpgradePathsAdderClient struct {
	AddReleaseUpgradePathStub        func(string, int, int) error
	addReleaseUpgradePathMutex       sync.RWMutex
	addReleaseUpgradePathArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	addReleaseUpgradePathReturns struct {
		result1 error
	}
	addReleaseUpgradePathReturnsOnCall map[int]struct {
		result1 error
	}
	ReleasesForProductSlugStub        func(string) ([]pivnet.Release, error)
	releasesForProductSlugMutex       sync.RWMutex
	releasesForProductSlugArgsForCall []struct {
		arg1 string
	}
	releasesForProductSlugReturns struct {
		result1 []pivnet.Release
		result2 error
	}
	releasesForProductSlugReturnsOnCall map[int]struct {
		result1 []pivnet.Release
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseUpgradePathsAdderClient) AddReleaseUpgradePath(arg1 string, arg2 int, arg3 int) error {
	fake.addReleaseUpgradePathMutex.Lock()
	ret, specificReturn := fake.addReleaseUpgradePathReturnsOnCall[len(fake.addReleaseUpgradePathArgsForCall)]
	fake.addReleaseUpgradePathArgsForCall = append(fake.addReleaseUpgradePathArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.AddReleaseUpgradePathStub
	fakeReturns := fake.addReleaseUpgradePathReturns
	fake.recordInvocation("AddReleaseUpgradePath", []interface{}{arg1, arg2, arg3})
	fake.addReleaseUpgradePathMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ReleaseUpgradePathsAdderClient) AddReleaseUpgradePathCallCount() int {
	fake.addReleaseUpgradePathMutex.RLock()
	defer fake.addReleaseUpgradePathMutex.RUnlock()
	return len(fake.addReleaseUpgradePathArgsForCall)
}

func (fake *ReleaseUpgradePathsAdderClient) AddReleaseUpgradePathCalls(stub func(string, int, int) error) {
	fake.addReleaseUpgradePathMutex.Lock()
	defer fake.addReleaseUpgradePathMutex.Unlock()
	fake.AddReleaseUpgradePathStub = stub
}

func (fake *ReleaseUpgradePathsAdderClient) AddReleaseUpgradePathArgsForCall(i int) (string, int, int) {
	fake.addReleaseUpgradePathMutex.RLock()
	defer fake.addReleaseUpgradePathMutex.RUnlock()
	argsForCall := fake.addReleaseUpgradePathArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ReleaseUpgradePathsAdderClient) AddReleaseUpgradePathReturns(result1 error) {
	fake.addReleaseUpgradePathMutex.Lock()
	defer fake.addReleaseUpgradePathMutex.Unlock()
	fake.AddReleaseUpgradePathStub = nil
	fake.addReleaseUpgradePathReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseUpgradePathsAdderClient) AddReleaseUpgradePathReturnsOnCall(i int, result1 error) {
	fake.addReleaseUpgradePathMutex.Lock()
	defer fake.addReleaseUpgradePathMutex.Unlock()
	fake.AddReleaseUpgradePathStub = nil
	if fake.addReleaseUpgradePathReturnsOnCall == nil {
		fake.addReleaseUpgradePathReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReleaseUpgradePathReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseUpgradePathsAdderClient) ReleasesForProductSlug(arg1 string) ([]pivnet.Release, error) {
	fake.releasesForProductSlugMutex.Lock()
	ret, specificReturn := fake.releasesForProductSlugReturnsOnCall[len(fake.releasesForProductSlugArgsForCall)]
	fake.releasesForProductSlugArgsForCall = append(fake.releasesForProductSlugArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReleasesForProductSlugStub
	fakeReturns := fake.releasesForProductSlugReturns
	fake.recordInvocation("ReleasesForProductSlug", []interface{}{arg1})
	fake.releasesForProductSlugMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseUpgradePathsAdderClient) ReleasesForProductSlugCallCount() int {
	fake.releasesForProductSlugMutex.RLock()
	defer fake.releasesForProductSlugMutex.RUnlock()
	return len(fake.releasesForProductSlugArgsForCall)
}

func (fake *ReleaseUpgradePathsAdderClient) ReleasesForProductSlugCalls(stub func(string) ([]pivnet.Release, error)) {
	fake.releasesForProductSlugMutex.Lock()
	defer fake.releasesForProductSlugMutex.Unlock()
	fake.ReleasesForProductSlugStub = stub
}

func (fake *ReleaseUpgradePathsAdderClient) ReleasesForProductSlugArgsForCall(i int) string {
	fake.releasesForProductSlugMutex.RLock()
	defer fake.releasesForProductSlugMutex.RUnlock()
	argsForCall := fake.releasesForProductSlugArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseUpgradePathsAdderClient) ReleasesForProductSlugReturns(result1 []pivnet.Release, result2 error) {
	fake.releasesForProductSlugMutex.Lock()
	defer fake.releasesForProductSlugMutex.Unlock()
	fake.ReleasesForProductSlugStub = nil
	fake.releasesForProductSlugReturns = struct {
		result1 []pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *ReleaseUpgradePathsAdderClient) ReleasesForProductSlugReturnsOnCall(i int, result1 []pivnet.Release, result2 error) {
	fake.releasesForProductSlugMutex.Lock()
	defer fake.releasesForProductSlugMutex.Unlock()
	fake.ReleasesForProductSlugStub = nil
	if fake.releasesForProductSlugReturnsOnCall == nil {
		fake.releasesForProductSlugReturnsOnCall = make(map[int]struct {
			result1 []pivnet.Release
			result2 error
		})
	}
	fake.releasesForProductSlugReturnsOnCall[i] = struct {
		result1 []pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *ReleaseUpgradePathsAdderClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseUpgradePathMutex.RLock()
	defer fake.addReleaseUpgradePathMutex.RUnlock()
	fake.releasesForProductSlugMutex.RLock()
	defer fake.releasesForProductSlugMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseUpgradePathsAdderClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
