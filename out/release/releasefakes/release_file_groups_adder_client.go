// Code generated by counterfeiter. DO NOT EDIT.
package releasefakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v7"
)

type ReleaseFileGroupsAdderClient struct {
	AddFileGroupStub        func(string, int, int) error
	addFileGroupMutex       sync.RWMutex
	addFileGroupArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	addFileGroupReturns struct {
		result1 error
	}
	addFileGroupReturnsOnCall map[int]struct {
		result1 error
	}
	AddToFileGroupStub        func(string, int, int) error
	addToFileGroupMutex       sync.RWMutex
	addToFileGroupArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	addToFileGroupReturns struct {
		result1 error
	}
	addToFileGroupReturnsOnCall map[int]struct {
		result1 error
	}
	CreateFileGroupStub        func(pivnet.CreateFileGroupConfig) (pivnet.FileGroup, error)
	createFileGroupMutex       sync.RWMutex
	createFileGroupArgsForCall []struct {
		arg1 pivnet.CreateFileGroupConfig
	}
	createFileGroupReturns struct {
		result1 pivnet.FileGroup
		result2 error
	}
	createFileGroupReturnsOnCall map[int]struct {
		result1 pivnet.FileGroup
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseFileGroupsAdderClient) AddFileGroup(arg1 string, arg2 int, arg3 int) error {
	fake.addFileGroupMutex.Lock()
	ret, specificReturn := fake.addFileGroupReturnsOnCall[len(fake.addFileGroupArgsForCall)]
	fake.addFileGroupArgsForCall = append(fake.addFileGroupArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.AddFileGroupStub
	fakeReturns := fake.addFileGroupReturns
	fake.recordInvocation("AddFileGroup", []interface{}{arg1, arg2, arg3})
	fake.addFileGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ReleaseFileGroupsAdderClient) AddFileGroupCallCount() int {
	fake.addFileGroupMutex.RLock()
	defer fake.addFileGroupMutex.RUnlock()
	return len(fake.addFileGroupArgsForCall)
}

func (fake *ReleaseFileGroupsAdderClient) AddFileGroupCalls(stub func(string, int, int) error) {
	fake.addFileGroupMutex.Lock()
	defer fake.addFileGroupMutex.Unlock()
	fake.AddFileGroupStub = stub
}

func (fake *ReleaseFileGroupsAdderClient) AddFileGroupArgsForCall(i int) (string, int, int) {
	fake.addFileGroupMutex.RLock()
	defer fake.addFileGroupMutex.RUnlock()
	argsForCall := fake.addFileGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ReleaseFileGroupsAdderClient) AddFileGroupReturns(result1 error) {
	fake.addFileGroupMutex.Lock()
	defer fake.addFileGroupMutex.Unlock()
	fake.AddFileGroupStub = nil
	fake.addFileGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseFileGroupsAdderClient) AddFileGroupReturnsOnCall(i int, result1 error) {
	fake.addFileGroupMutex.Lock()
	defer fake.addFileGroupMutex.Unlock()
	fake.AddFileGroupStub = nil
	if fake.addFileGroupReturnsOnCall == nil {
		fake.addFileGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addFileGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseFileGroupsAdderClient) AddToFileGroup(arg1 string, arg2 int, arg3 int) error {
	fake.addToFileGroupMutex.Lock()
	ret, specificReturn := fake.addToFileGroupReturnsOnCall[len(fake.addToFileGroupArgsForCall)]
	fake.addToFileGroupArgsForCall = append(fake.addToFileGroupArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.AddToFileGroupStub
	fakeReturns := fake.addToFileGroupReturns
	fake.recordInvocation("AddToFileGroup", []interface{}{arg1, arg2, arg3})
	fake.addToFileGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ReleaseFileGroupsAdderClient) AddToFileGroupCallCount() int {
	fake.addToFileGroupMutex.RLock()
	defer fake.addToFileGroupMutex.RUnlock()
	return len(fake.addToFileGroupArgsForCall)
}

func (fake *ReleaseFileGroupsAdderClient) AddToFileGroupCalls(stub func(string, int, int) error) {
	fake.addToFileGroupMutex.Lock()
	defer fake.addToFileGroupMutex.Unlock()
	fake.AddToFileGroupStub = stub
}

func (fake *ReleaseFileGroupsAdderClient) AddToFileGroupArgsForCall(i int) (string, int, int) {
	fake.addToFileGroupMutex.RLock()
	defer fake.addToFileGroupMutex.RUnlock()
	argsForCall := fake.addToFileGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ReleaseFileGroupsAdderClient) AddToFileGroupReturns(result1 error) {
	fake.addToFileGroupMutex.Lock()
	defer fake.addToFileGroupMutex.Unlock()
	fake.AddToFileGroupStub = nil
	fake.addToFileGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseFileGroupsAdderClient) AddToFileGroupReturnsOnCall(i int, result1 error) {
	fake.addToFileGroupMutex.Lock()
	defer fake.addToFileGroupMutex.Unlock()
	fake.AddToFileGroupStub = nil
	if fake.addToFileGroupReturnsOnCall == nil {
		fake.addToFileGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addToFileGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseFileGroupsAdderClient) CreateFileGroup(arg1 pivnet.CreateFileGroupConfig) (pivnet.FileGroup, error) {
	fake.createFileGroupMutex.Lock()
	ret, specificReturn := fake.createFileGroupReturnsOnCall[len(fake.createFileGroupArgsForCall)]
	fake.createFileGroupArgsForCall = append(fake.createFileGroupArgsForCall, struct {
		arg1 pivnet.CreateFileGroupConfig
	}{arg1})
	stub := fake.CreateFileGroupStub
	fakeReturns := fake.createFileGroupReturns
	fake.recordInvocation("CreateFileGroup", []interface{}{arg1})
	fake.createFileGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseFileGroupsAdderClient) CreateFileGroupCallCount() int {
	fake.createFileGroupMutex.RLock()
	defer fake.createFileGroupMutex.RUnlock()
	return len(fake.createFileGroupArgsForCall)
}

func (fake *ReleaseFileGroupsAdderClient) CreateFileGroupCalls(stub func(pivnet.CreateFileGroupConfig) (pivnet.FileGroup, error)) {
	fake.createFileGroupMutex.Lock()
	defer fake.createFileGroupMutex.Unlock()
	fake.CreateFileGroupStub = stub
}

func (fake *ReleaseFileGroupsAdderClient) CreateFileGroupArgsForCall(i int) pivnet.CreateFileGroupConfig {
	fake.createFileGroupMutex.RLock()
	defer fake.createFileGroupMutex.RUnlock()
	argsForCall := fake.createFileGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseFileGroupsAdderClient) CreateFileGroupReturns(result1 pivnet.FileGroup, result2 error) {
	fake.createFileGroupMutex.Lock()
	defer fake.createFileGroupMutex.Unlock()
	fake.CreateFileGroupStub = nil
	fake.createFileGroupReturns = struct {
		result1 pivnet.FileGroup
		result2 error
	}{result1, result2}
}

func (fake *ReleaseFileGroupsAdderClient) CreateFileGroupReturnsOnCall(i int, result1 pivnet.FileGroup, result2 error) {
	fake.createFileGroupMutex.Lock()
	defer fake.createFileGroupMutex.Unlock()
	fake.CreateFileGroupStub = nil
	if fake.createFileGroupReturnsOnCall == nil {
		fake.createFileGroupReturnsOnCall = make(map[int]struct {
			result1 pivnet.FileGroup
			result2 error
		})
	}
	fake.createFileGroupReturnsOnCall[i] = struct {
		result1 pivnet.FileGroup
		result2 error
	}{result1, result2}
}

func (fake *ReleaseFileGroupsAdderClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addFileGroupMutex.RLock()
	defer fake.addFileGroupMutex.RUnlock()
	fake.addToFileGroupMutex.RLock()
	defer fake.addToFileGroupMutex.RUnlock()
	fake.createFileGroupMutex.RLock()
	defer fake.createFileGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseFileGroupsAdderClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
