// Code generated by counterfeiter. DO NOT EDIT.
package outfakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v7"
)

type ReleaseArtifactReferencesAdder struct {
	AddReleaseArtifactReferencesStub        func(pivnet.Release) error
	addReleaseArtifactReferencesMutex       sync.RWMutex
	addReleaseArtifactReferencesArgsForCall []struct {
		arg1 pivnet.Release
	}
	addReleaseArtifactReferencesReturns struct {
		result1 error
	}
	addReleaseArtifactReferencesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseArtifactReferencesAdder) AddReleaseArtifactReferences(arg1 pivnet.Release) error {
	fake.addReleaseArtifactReferencesMutex.Lock()
	ret, specificReturn := fake.addReleaseArtifactReferencesReturnsOnCall[len(fake.addReleaseArtifactReferencesArgsForCall)]
	fake.addReleaseArtifactReferencesArgsForCall = append(fake.addReleaseArtifactReferencesArgsForCall, struct {
		arg1 pivnet.Release
	}{arg1})
	stub := fake.AddReleaseArtifactReferencesStub
	fakeReturns := fake.addReleaseArtifactReferencesReturns
	fake.recordInvocation("AddReleaseArtifactReferences", []interface{}{arg1})
	fake.addReleaseArtifactReferencesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ReleaseArtifactReferencesAdder) AddReleaseArtifactReferencesCallCount() int {
	fake.addReleaseArtifactReferencesMutex.RLock()
	defer fake.addReleaseArtifactReferencesMutex.RUnlock()
	return len(fake.addReleaseArtifactReferencesArgsForCall)
}

func (fake *ReleaseArtifactReferencesAdder) AddReleaseArtifactReferencesCalls(stub func(pivnet.Release) error) {
	fake.addReleaseArtifactReferencesMutex.Lock()
	defer fake.addReleaseArtifactReferencesMutex.Unlock()
	fake.AddReleaseArtifactReferencesStub = stub
}

func (fake *ReleaseArtifactReferencesAdder) AddReleaseArtifactReferencesArgsForCall(i int) pivnet.Release {
	fake.addReleaseArtifactReferencesMutex.RLock()
	defer fake.addReleaseArtifactReferencesMutex.RUnlock()
	argsForCall := fake.addReleaseArtifactReferencesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseArtifactReferencesAdder) AddReleaseArtifactReferencesReturns(result1 error) {
	fake.addReleaseArtifactReferencesMutex.Lock()
	defer fake.addReleaseArtifactReferencesMutex.Unlock()
	fake.AddReleaseArtifactReferencesStub = nil
	fake.addReleaseArtifactReferencesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseArtifactReferencesAdder) AddReleaseArtifactReferencesReturnsOnCall(i int, result1 error) {
	fake.addReleaseArtifactReferencesMutex.Lock()
	defer fake.addReleaseArtifactReferencesMutex.Unlock()
	fake.AddReleaseArtifactReferencesStub = nil
	if fake.addReleaseArtifactReferencesReturnsOnCall == nil {
		fake.addReleaseArtifactReferencesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReleaseArtifactReferencesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseArtifactReferencesAdder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseArtifactReferencesMutex.RLock()
	defer fake.addReleaseArtifactReferencesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseArtifactReferencesAdder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
