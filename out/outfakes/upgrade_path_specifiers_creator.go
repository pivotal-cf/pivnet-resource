// Code generated by counterfeiter. DO NOT EDIT.
package outfakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v7"
)

type UpgradePathSpecifiersCreator struct {
	CreateUpgradePathSpecifiersStub        func(pivnet.Release) error
	createUpgradePathSpecifiersMutex       sync.RWMutex
	createUpgradePathSpecifiersArgsForCall []struct {
		arg1 pivnet.Release
	}
	createUpgradePathSpecifiersReturns struct {
		result1 error
	}
	createUpgradePathSpecifiersReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiers(arg1 pivnet.Release) error {
	fake.createUpgradePathSpecifiersMutex.Lock()
	ret, specificReturn := fake.createUpgradePathSpecifiersReturnsOnCall[len(fake.createUpgradePathSpecifiersArgsForCall)]
	fake.createUpgradePathSpecifiersArgsForCall = append(fake.createUpgradePathSpecifiersArgsForCall, struct {
		arg1 pivnet.Release
	}{arg1})
	stub := fake.CreateUpgradePathSpecifiersStub
	fakeReturns := fake.createUpgradePathSpecifiersReturns
	fake.recordInvocation("CreateUpgradePathSpecifiers", []interface{}{arg1})
	fake.createUpgradePathSpecifiersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersCallCount() int {
	fake.createUpgradePathSpecifiersMutex.RLock()
	defer fake.createUpgradePathSpecifiersMutex.RUnlock()
	return len(fake.createUpgradePathSpecifiersArgsForCall)
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersCalls(stub func(pivnet.Release) error) {
	fake.createUpgradePathSpecifiersMutex.Lock()
	defer fake.createUpgradePathSpecifiersMutex.Unlock()
	fake.CreateUpgradePathSpecifiersStub = stub
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersArgsForCall(i int) pivnet.Release {
	fake.createUpgradePathSpecifiersMutex.RLock()
	defer fake.createUpgradePathSpecifiersMutex.RUnlock()
	argsForCall := fake.createUpgradePathSpecifiersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersReturns(result1 error) {
	fake.createUpgradePathSpecifiersMutex.Lock()
	defer fake.createUpgradePathSpecifiersMutex.Unlock()
	fake.CreateUpgradePathSpecifiersStub = nil
	fake.createUpgradePathSpecifiersReturns = struct {
		result1 error
	}{result1}
}

func (fake *UpgradePathSpecifiersCreator) CreateUpgradePathSpecifiersReturnsOnCall(i int, result1 error) {
	fake.createUpgradePathSpecifiersMutex.Lock()
	defer fake.createUpgradePathSpecifiersMutex.Unlock()
	fake.CreateUpgradePathSpecifiersStub = nil
	if fake.createUpgradePathSpecifiersReturnsOnCall == nil {
		fake.createUpgradePathSpecifiersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createUpgradePathSpecifiersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *UpgradePathSpecifiersCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUpgradePathSpecifiersMutex.RLock()
	defer fake.createUpgradePathSpecifiersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UpgradePathSpecifiersCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
