// Code generated by counterfeiter. DO NOT EDIT.
package outfakes

import (
	"sync"
)

type Globber struct {
	ExactGlobsStub        func() ([]string, error)
	exactGlobsMutex       sync.RWMutex
	exactGlobsArgsForCall []struct {
	}
	exactGlobsReturns struct {
		result1 []string
		result2 error
	}
	exactGlobsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Globber) ExactGlobs() ([]string, error) {
	fake.exactGlobsMutex.Lock()
	ret, specificReturn := fake.exactGlobsReturnsOnCall[len(fake.exactGlobsArgsForCall)]
	fake.exactGlobsArgsForCall = append(fake.exactGlobsArgsForCall, struct {
	}{})
	stub := fake.ExactGlobsStub
	fakeReturns := fake.exactGlobsReturns
	fake.recordInvocation("ExactGlobs", []interface{}{})
	fake.exactGlobsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Globber) ExactGlobsCallCount() int {
	fake.exactGlobsMutex.RLock()
	defer fake.exactGlobsMutex.RUnlock()
	return len(fake.exactGlobsArgsForCall)
}

func (fake *Globber) ExactGlobsCalls(stub func() ([]string, error)) {
	fake.exactGlobsMutex.Lock()
	defer fake.exactGlobsMutex.Unlock()
	fake.ExactGlobsStub = stub
}

func (fake *Globber) ExactGlobsReturns(result1 []string, result2 error) {
	fake.exactGlobsMutex.Lock()
	defer fake.exactGlobsMutex.Unlock()
	fake.ExactGlobsStub = nil
	fake.exactGlobsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *Globber) ExactGlobsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.exactGlobsMutex.Lock()
	defer fake.exactGlobsMutex.Unlock()
	fake.ExactGlobsStub = nil
	if fake.exactGlobsReturnsOnCall == nil {
		fake.exactGlobsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.exactGlobsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *Globber) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exactGlobsMutex.RLock()
	defer fake.exactGlobsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Globber) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
