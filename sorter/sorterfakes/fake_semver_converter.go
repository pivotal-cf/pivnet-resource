// Code generated by counterfeiter. DO NOT EDIT.
package sorterfakes

import (
	"sync"

	"github.com/blang/semver"
)

type FakeSemverConverter struct {
	ToValidSemverStub        func(string) (semver.Version, error)
	toValidSemverMutex       sync.RWMutex
	toValidSemverArgsForCall []struct {
		arg1 string
	}
	toValidSemverReturns struct {
		result1 semver.Version
		result2 error
	}
	toValidSemverReturnsOnCall map[int]struct {
		result1 semver.Version
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSemverConverter) ToValidSemver(arg1 string) (semver.Version, error) {
	fake.toValidSemverMutex.Lock()
	ret, specificReturn := fake.toValidSemverReturnsOnCall[len(fake.toValidSemverArgsForCall)]
	fake.toValidSemverArgsForCall = append(fake.toValidSemverArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ToValidSemverStub
	fakeReturns := fake.toValidSemverReturns
	fake.recordInvocation("ToValidSemver", []interface{}{arg1})
	fake.toValidSemverMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSemverConverter) ToValidSemverCallCount() int {
	fake.toValidSemverMutex.RLock()
	defer fake.toValidSemverMutex.RUnlock()
	return len(fake.toValidSemverArgsForCall)
}

func (fake *FakeSemverConverter) ToValidSemverCalls(stub func(string) (semver.Version, error)) {
	fake.toValidSemverMutex.Lock()
	defer fake.toValidSemverMutex.Unlock()
	fake.ToValidSemverStub = stub
}

func (fake *FakeSemverConverter) ToValidSemverArgsForCall(i int) string {
	fake.toValidSemverMutex.RLock()
	defer fake.toValidSemverMutex.RUnlock()
	argsForCall := fake.toValidSemverArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSemverConverter) ToValidSemverReturns(result1 semver.Version, result2 error) {
	fake.toValidSemverMutex.Lock()
	defer fake.toValidSemverMutex.Unlock()
	fake.ToValidSemverStub = nil
	fake.toValidSemverReturns = struct {
		result1 semver.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeSemverConverter) ToValidSemverReturnsOnCall(i int, result1 semver.Version, result2 error) {
	fake.toValidSemverMutex.Lock()
	defer fake.toValidSemverMutex.Unlock()
	fake.ToValidSemverStub = nil
	if fake.toValidSemverReturnsOnCall == nil {
		fake.toValidSemverReturnsOnCall = make(map[int]struct {
			result1 semver.Version
			result2 error
		})
	}
	fake.toValidSemverReturnsOnCall[i] = struct {
		result1 semver.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeSemverConverter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.toValidSemverMutex.RLock()
	defer fake.toValidSemverMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSemverConverter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
